---
interface Props {
  value: number;
  max?: number;
  label?: string;
  showValue?: boolean;
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'success' | 'warning' | 'error';
  class?: string;
}

const {
  value,
  max = 100,
  label,
  showValue = false,
  size = 'md',
  color = 'primary',
  class: className
} = Astro.props;

const percentage = Math.min(Math.max((value / max) * 100, 0), 100);

const sizes = {
  sm: 'h-1.5',
  md: 'h-2.5',
  lg: 'h-4'
};

const colors = {
  primary: 'bg-primary-600 dark:bg-primary-500',
  success: 'bg-green-600 dark:bg-green-500',
  warning: 'bg-yellow-600 dark:bg-yellow-500',
  error: 'bg-red-600 dark:bg-red-500'
};
---

<div class:list={["w-full", className]}>
  {(label || showValue) && (
    <div class="flex justify-between mb-1">
      {label && (
        <span class="text-sm font-medium text-gray-700 dark:text-gray-200">
          {label}
        </span>
      )}
      {showValue && (
        <span class="text-sm font-medium text-gray-700 dark:text-gray-200">
          {value}/{max}
        </span>
      )}
    </div>
  )}
  <div class:list={[
    "w-full bg-gray-200 rounded-full dark:bg-gray-700",
    sizes[size]
  ]}>
    <div
      class:list={[
        "rounded-full transition-all duration-300",
        colors[color],
        sizes[size]
      ]}
      style={`width: ${percentage}%`}
      role="progressbar"
      aria-valuenow={value}
      aria-valuemin={0}
      aria-valuemax={max}
    />
  </div>
</div> 