---
interface DropdownItem {
  label: string;
  href?: string;
  icon?: string;
  onClick?: string;
  divider?: boolean;
}

interface Props {
  label: string;
  items: DropdownItem[];
  align?: 'left' | 'right';
  class?: string;
}

const {
  label,
  items,
  align = 'left',
  class: className
} = Astro.props;

import { Icon } from 'astro-icon/components';
---

<div class="relative inline-block text-left">
  <button
    type="button"
    class:list={[
      "inline-flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg",
      "text-gray-700 bg-white border border-gray-300",
      "hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500",
      "dark:bg-dark-surface dark:text-gray-200 dark:border-gray-600",
      "dark:hover:bg-dark-surface-soft",
      className
    ]}
    aria-haspopup="true"
    aria-expanded="false"
  >
    {label}
    <Icon name="lucide:chevron-down" class="w-4 h-4" />
  </button>

  <div
    class:list={[
      "absolute z-10 mt-2 w-56 rounded-lg shadow-lg",
      "bg-white dark:bg-dark-surface border border-gray-100 dark:border-gray-700",
      "hidden", // Initially hidden
      align === 'right' ? 'right-0' : 'left-0'
    ]}
    role="menu"
    aria-orientation="vertical"
  >
    <div class="py-1" role="none">
      {items.map((item, index) => (
        <>
          {item.divider && index > 0 && (
            <div class="h-px my-1 bg-gray-200 dark:bg-gray-700" role="none" />
          )}
          {item.href ? (
            <a
              href={item.href}
              class:list={[
                "flex items-center gap-2 px-4 py-2 text-sm",
                "text-gray-700 hover:bg-gray-100 hover:text-gray-900",
                "dark:text-gray-200 dark:hover:bg-dark-surface-soft dark:hover:text-white"
              ]}
              role="menuitem"
            >
              {item.icon && <Icon name={item.icon} class="w-4 h-4" />}
              {item.label}
            </a>
          ) : (
            <button
              type="button"
              class:list={[
                "flex items-center gap-2 w-full text-left px-4 py-2 text-sm",
                "text-gray-700 hover:bg-gray-100 hover:text-gray-900",
                "dark:text-gray-200 dark:hover:bg-dark-surface-soft dark:hover:text-white"
              ]}
              role="menuitem"
              onclick={item.onClick}
            >
              {item.icon && <Icon name={item.icon} class="w-4 h-4" />}
              {item.label}
            </button>
          )}
        </>
      ))}
    </div>
  </div>
</div>

<script>
  const dropdowns = document.querySelectorAll('[aria-haspopup="true"]');

  dropdowns.forEach(trigger => {
    const menu = trigger.nextElementSibling;
    
    // Toggle dropdown
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      
      // Close all other dropdowns
      dropdowns.forEach(other => {
        if (other !== trigger) {
          other.setAttribute('aria-expanded', 'false');
          other.nextElementSibling?.classList.add('hidden');
        }
      });
      
      // Toggle current dropdown
      trigger.setAttribute('aria-expanded', (!isExpanded).toString());
      menu?.classList.toggle('hidden');
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    dropdowns.forEach(trigger => {
      trigger.setAttribute('aria-expanded', 'false');
      trigger.nextElementSibling?.classList.add('hidden');
    });
  });
</script> 