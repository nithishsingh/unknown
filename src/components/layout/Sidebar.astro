---
interface NavItem {
  label: string;
  href: string;
  icon?: string;
  badge?: string;
  children?: Omit<NavItem, 'children'>[];
}

interface Props {
  items: NavItem[];
  collapsed?: boolean;
  class?: string;
}

const {
  items,
  collapsed = false,
  class: className
} = Astro.props;

import { Icon } from 'astro-icon/components';

const currentPath = Astro.url.pathname;
---

<aside
  class:list={[
    'flex flex-col h-screen sticky top-0',
    'bg-white dark:bg-dark-surface border-r border-gray-200 dark:border-gray-700',
    'transition-all duration-300',
    collapsed ? 'w-16' : 'w-64',
    className
  ]}
  data-sidebar
>
  {/* Logo */}
  <div class:list={[
    'flex items-center h-16 px-4',
    'border-b border-gray-200 dark:border-gray-700'
  ]}>
    <slot name="logo" />
  </div>

  {/* Navigation */}
  <nav class="flex-1 overflow-y-auto p-4">
    <ul class="space-y-1">
      {items.map(item => (
        <li>
          {item.children ? (
            <div>
              <button
                type="button"
                class:list={[
                  'flex items-center w-full px-3 py-2 text-sm rounded-lg',
                  'text-gray-700 dark:text-gray-200',
                  'hover:bg-gray-100 dark:hover:bg-dark-surface-soft',
                  'transition-colors duration-200'
                ]}
                data-collapse-trigger
              >
                {item.icon && (
                  <Icon name={item.icon} class="w-5 h-5 mr-3" />
                )}
                {!collapsed && (
                  <>
                    <span class="flex-1 text-left">{item.label}</span>
                    <Icon
                      name="lucide:chevron-down"
                      class="w-4 h-4 transform transition-transform duration-200"
                    />
                  </>
                )}
              </button>
              <ul class="mt-1 space-y-1 pl-8" data-collapse-content>
                {item.children.map(child => (
                  <li>
                    <a
                      href={child.href}
                      class:list={[
                        'flex items-center px-3 py-2 text-sm rounded-lg',
                        'text-gray-700 dark:text-gray-200',
                        'hover:bg-gray-100 dark:hover:bg-dark-surface-soft',
                        'transition-colors duration-200',
                        currentPath === child.href && 'bg-primary-50 text-primary-700 dark:bg-primary-900/20 dark:text-primary-400'
                      ]}
                    >
                      {child.icon && (
                        <Icon name={child.icon} class="w-5 h-5 mr-3" />
                      )}
                      {!collapsed && child.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <a
              href={item.href}
              class:list={[
                'flex items-center px-3 py-2 text-sm rounded-lg',
                'text-gray-700 dark:text-gray-200',
                'hover:bg-gray-100 dark:hover:bg-dark-surface-soft',
                'transition-colors duration-200',
                currentPath === item.href && 'bg-primary-50 text-primary-700 dark:bg-primary-900/20 dark:text-primary-400'
              ]}
            >
              {item.icon && (
                <Icon name={item.icon} class="w-5 h-5 mr-3" />
              )}
              {!collapsed && (
                <span class="flex-1">{item.label}</span>
              )}
              {!collapsed && item.badge && (
                <span class="ml-auto px-2 py-0.5 text-xs font-medium rounded-full bg-primary-100 text-primary-700 dark:bg-primary-900/20 dark:text-primary-400">
                  {item.badge}
                </span>
              )}
            </a>
          )}
        </li>
      ))}
    </ul>
  </nav>

  {/* Footer */}
  <div class:list={[
    'p-4 border-t border-gray-200 dark:border-gray-700',
    collapsed ? 'items-center' : ''
  ]}>
    <slot name="footer" />
  </div>
</aside>

<script>
  // Handle collapsible sections
  const triggers = document.querySelectorAll('[data-collapse-trigger]');
  
  triggers.forEach(trigger => {
    trigger.addEventListener('click', () => {
      const content = trigger.nextElementSibling;
      const icon = trigger.querySelector('svg:last-child') as SVGElement | null;
      
      content?.classList.toggle('hidden');
      if (icon) {
        icon.style.transform = content?.classList.contains('hidden') 
          ? 'rotate(0deg)' 
          : 'rotate(180deg)';
      }
    });
  });
</script> 