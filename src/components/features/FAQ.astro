---
interface FAQItem {
  question: string;
  answer: string;
}

interface Props {
  title?: string;
  description?: string;
  items: FAQItem[];
  class?: string;
}

const {
  title = "Frequently Asked Questions",
  description,
  items,
  class: className
} = Astro.props;

import { Icon } from 'astro-icon/components';
---

<div class:list={["w-full", className]}>
  {(title || description) && (
    <div class="text-center mb-12">
      {title && (
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          {title}
        </h2>
      )}
      {description && (
        <p class="text-xl text-gray-600 dark:text-gray-400">
          {description}
        </p>
      )}
    </div>
  )}

  <div class="max-w-3xl mx-auto divide-y divide-gray-200 dark:divide-gray-700">
    {items.map((item, index) => (
      <div class="py-6" data-faq-item>
        <button
          type="button"
          class="flex w-full items-start justify-between text-left"
          aria-expanded="false"
          aria-controls={`faq-answer-${index}`}
        >
          <span class="text-lg font-medium text-gray-900 dark:text-white">
            {item.question}
          </span>
          <span class="ml-6 flex h-7 items-center">
            <Icon
              name="lucide:chevron-down"
              class="h-6 w-6 transform transition-transform duration-200"
            />
          </span>
        </button>
        <div
          id={`faq-answer-${index}`}
          class="mt-2 hidden pr-12"
          role="region"
        >
          <p class="text-base text-gray-600 dark:text-gray-400">
            {item.answer}
          </p>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  const faqItems = document.querySelectorAll('[data-faq-item]');
  
  faqItems.forEach(item => {
    const button = item.querySelector('button');
    const content = item.querySelector('[role="region"]');
    const icon = button?.querySelector('svg');
    
    button?.addEventListener('click', () => {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      
      // Close all other items
      faqItems.forEach(otherItem => {
        if (otherItem !== item) {
          const otherButton = otherItem.querySelector('button');
          const otherContent = otherItem.querySelector('[role="region"]');
          const otherIcon = otherButton?.querySelector('svg');
          
          otherButton?.setAttribute('aria-expanded', 'false');
          otherContent?.classList.add('hidden');
          otherIcon?.style.setProperty('transform', 'rotate(0deg)');
        }
      });
      
      // Toggle current item
      button.setAttribute('aria-expanded', (!isExpanded).toString());
      content?.classList.toggle('hidden');
      
      if (icon) {
        icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
      }
    });
  });
</script> 